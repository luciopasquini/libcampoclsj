/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.12
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif



#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1
#define  SWIG_IOError        	   -2
#define  SWIG_RuntimeError   	   -3
#define  SWIG_IndexError     	   -4
#define  SWIG_TypeError      	   -5
#define  SWIG_DivisionByZero 	   -6
#define  SWIG_OverflowError  	   -7
#define  SWIG_SyntaxError    	   -8
#define  SWIG_ValueError     	   -9
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12
#define  SWIG_NullReferenceError   -13




    #define SWIG_FILE_WITH_INIT

        #include "modello.h"
        #include "antenna.h" 
        #include "gruppo_antenne.h"  
        #include "impianto.h"
		#include "gruppo_modelli.h"   
        #include "gruppo_impianti.h"
        #include "modulo_calcolo.h"


class StopIterator {};


SWIGINTERN void SWIG_JavaException(JNIEnv *jenv, int code, const char *msg) {
  SWIG_JavaExceptionCodes exception_code = SWIG_JavaUnknownError;
  switch(code) {
  case SWIG_MemoryError:
    exception_code = SWIG_JavaOutOfMemoryError;
    break;
  case SWIG_IOError:
    exception_code = SWIG_JavaIOException;
    break;
  case SWIG_SystemError:
  case SWIG_RuntimeError:
    exception_code = SWIG_JavaRuntimeException;
    break;
  case SWIG_OverflowError:
  case SWIG_IndexError:
    exception_code = SWIG_JavaIndexOutOfBoundsException;
    break;
  case SWIG_DivisionByZero:
    exception_code = SWIG_JavaArithmeticException;
    break;
  case SWIG_SyntaxError:
  case SWIG_ValueError:
  case SWIG_TypeError:
    exception_code = SWIG_JavaIllegalArgumentException;
    break;
  case SWIG_UnknownError:
  default:
    exception_code = SWIG_JavaUnknownError;
    break;
  }
  SWIG_JavaThrowException(jenv, exception_code, msg);
}


#include <typeinfo>
#include <stdexcept>


#include <typeinfo>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector< int >::const_reference std_vector_Sl_int_Sg__get(std::vector< int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector< int > *self,int i,std::vector< int >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector< double >::const_reference std_vector_Sl_double_Sg__get(std::vector< double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector< double > *self,int i,std::vector< double >::value_type const &val){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = val;
                else
                    throw std::out_of_range("vector index out of range");
            }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1StopIterator(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  StopIterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (StopIterator *)new StopIterator();
  *(StopIterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1StopIterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  StopIterator *arg1 = (StopIterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(StopIterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1FLD_1MOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_FLD_MOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1INT_1MOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_INT_MOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1DOUBLE_1MOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_DOUBLE_MOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1BOOL_1MOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_BOOL_MOD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1debugModelli_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  string arg1 ;
  string *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg1 = *argp1; 
  modello::debugModelli = arg1;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_modello_1debugModelli_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = modello::debugModelli;
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1numOgradi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  modello *arg1 = (modello *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numOgradi = arg2;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1numOgradi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int) ((arg1)->numOgradi);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1numVgradi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  modello *arg1 = (modello *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->numVgradi = arg2;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1numVgradi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int) ((arg1)->numVgradi);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1modello_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (modello *)new modello();
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1modello_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (modello *)new modello(arg1);
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1setDM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->setDM(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_modello_1getDM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDM(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1getIdModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int)(arg1)->getIdModello();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getGuadagno(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (double)(arg1)->getGuadagno();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getLunghezza(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (double)(arg1)->getLunghezza();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getFrequenza(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (double)(arg1)->getFrequenza();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_modello_1getNomeMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (char *)(arg1)->getNomeMod();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_modello_1getMarca(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (char *)(arg1)->getMarca();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_modello_1getNote1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (char *)(arg1)->getNote1();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_modello_1getImmagine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (char *)(arg1)->getImmagine();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1getSizeAttO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int)(arg1)->getSizeAttO();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1getSizeGrdO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int)(arg1)->getSizeGrdO();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1getSizeAttV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int)(arg1)->getSizeAttV();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_modello_1getSizeGrdV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  result = (int)(arg1)->getSizeGrdV();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getAttO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getAttO(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getGrdO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getGrdO(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getAttV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getAttV(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_modello_1getGrdV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  jdouble jresult = 0 ;
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (double)(arg1)->getGrdV(arg2);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1setIdMod(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  modello *arg1 = (modello *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdMod(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1setAttO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setAttO(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1setGrdO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setGrdO(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1setAttV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setAttV(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1setGrdV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jdouble jarg3) {
  modello *arg1 = (modello *) 0 ;
  unsigned int arg2 ;
  double arg3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (double)jarg3; 
  (arg1)->setGrdV(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1addAttO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  modello *arg1 = (modello *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addAttO(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1addGrdO(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  modello *arg1 = (modello *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addGrdO(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1addAttV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  modello *arg1 = (modello *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addAttV(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_modello_1addGrdV(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  modello *arg1 = (modello *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(modello **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->addGrdV(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1modello(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  modello *arg1 = (modello *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(modello **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_FLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1INT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_INT;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1DOUBLE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_DOUBLE;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_STR_1BOOL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)STR_BOOL;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1debugAntenne_1set(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  string arg1 ;
  string *argp1 ;
  
  (void)jenv;
  (void)jcls;
  argp1 = *(string **)&jarg1; 
  if (!argp1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null string");
    return ;
  }
  arg1 = *argp1; 
  antenna::debugAntenne = arg1;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_antenna_1debugAntenne_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  string result;
  
  (void)jenv;
  (void)jcls;
  result = antenna::debugAntenne;
  *(string **)&jresult = new string((const string &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1Modified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  antenna *arg1 = (antenna *) 0 ;
  set< string > arg2 ;
  set< string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  argp2 = *(set< string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null set< string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Modified = arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_antenna_1Modified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  set< string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result =  ((arg1)->Modified);
  *(set< string > **)&jresult = new set< string >((const set< string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1antenna_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (antenna *)new antenna();
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1antenna_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (antenna *)new antenna(arg1);
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1setDA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->setDA(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_antenna_1getDA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDA(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1setModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  antenna *arg1 = (antenna *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setModified(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1noModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  antenna *arg1 = (antenna *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->noModified(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_antenna_1isModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->isModified(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdAntenna(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdAntenna();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdPadre(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdPadre();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getH();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getNumTx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getNumTx();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getPotenzaTx(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getPotenzaTx();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getTilt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getTilt();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getDirezione(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getDirezione();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_antenna_1getAttiva(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (bool)(arg1)->getAttiva();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_antenna_1getAntCalc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (bool)(arg1)->getAntCalc();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdImpianto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdImpianto();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdModello();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdServizio(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdServizio();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdPolar(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdPolar();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_antenna_1getIdStato(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (int)(arg1)->getIdStato();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getFreqMin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getFreqMin();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getFreqMax(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getFreqMax();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getFrequenza(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getFrequenza();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getFase(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getFase();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getAlfa24(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getAlfa24();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getAttPC(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getAttPC();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getAttDTX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getAttDTX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getAttTDD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getAttTDD();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getPotenzaPerc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getPotenzaPerc();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_antenna_1getDataIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (char *)(arg1)->getDataIn();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_antenna_1getDataFin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (char *)(arg1)->getDataFin();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_antenna_1getNote1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (char *)(arg1)->getNote1();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_antenna_1getImmagine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (char *)(arg1)->getImmagine();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_antenna_1getModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (modello *)(arg1)->getModello();
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1setModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  antenna *arg1 = (antenna *) 0 ;
  modello *arg2 = (modello *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = *(modello **)&jarg2; 
  (arg1)->setModello(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1setIdAnt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  antenna *arg1 = (antenna *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdAnt(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_antenna_1setPot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  antenna *arg1 = (antenna *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPot(arg2);
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_antenna_1getPot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  antenna *arg1 = (antenna *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(antenna **)&jarg1; 
  result = (double)(arg1)->getPot();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1antenna(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  antenna *arg1 = (antenna *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(antenna **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_NUM_1MOD_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_MOD_FLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_MOD_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[20] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[20])(char (*)[20])MOD_FLD;
  *(char (**)[20])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoModelli_1modelli_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  vector< modello * > *arg2 = (vector< modello * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = *(vector< modello * > **)&jarg2; 
  if (arg1) (arg1)->modelli = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoModelli_1modelli_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  vector< modello * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (vector< modello * > *)& ((arg1)->modelli);
  *(vector< modello * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoModelli_1itM_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  vector< modello * >::iterator *arg2 = (vector< modello * >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = *(vector< modello * >::iterator **)&jarg2; 
  if (arg1) (arg1)->itM = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoModelli_1itM_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  vector< modello * >::iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (vector< modello * >::iterator *)& ((arg1)->itM);
  *(vector< modello * >::iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoModelli_1md5FileMod_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->md5FileMod, (const char *)arg2, 40-1);
      arg1->md5FileMod[40-1] = 0;
    } else {
      arg1->md5FileMod[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_gruppoModelli_1md5FileMod_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (char *)(char *) ((arg1)->md5FileMod);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoModelli_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  gruppoModelli *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (gruppoModelli *)new gruppoModelli();
  *(gruppoModelli **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoModelli_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  gruppoModelli *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (gruppoModelli *)new gruppoModelli(arg1);
  *(gruppoModelli **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1gruppoModelli(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gruppoModelli **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1somma_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  modello *arg2 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = *(modello **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1getMinNegID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (int)(arg1)->getMinNegID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1somma_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  gruppoModelli *arg2 = (gruppoModelli *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = *(gruppoModelli **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoModelli_1deleteModelli(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  (arg1)->deleteModelli();
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1addModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  modello *arg2 = (modello *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = *(modello **)&jarg2; 
  result = (int)(arg1)->addModello(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoModelli_1getModById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  int arg2 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (modello *)(arg1)->getModById(arg2);
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1removeModById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeModById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoModelli_1beginIter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  (arg1)->beginIter();
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoModelli_1nextItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  result = (modello *)(arg1)->nextItem();
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1leggiModelliDiagrammiXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->leggiModelliDiagrammiXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoModelli_1scriviModelliDiagrammiXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoModelli *arg1 = (gruppoModelli *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoModelli **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->scriviModelliDiagrammiXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1grImp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  void *arg2 = (void *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(void **)&jarg2; 
  if (arg1) (arg1)->grImp = arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1grImp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  void *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (void *) ((arg1)->grImp);
  *(void **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1itA_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  vector< antenna * >::iterator *arg2 = (vector< antenna * >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(vector< antenna * >::iterator **)&jarg2; 
  if (arg1) (arg1)->itA = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1itA_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  vector< antenna * >::iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (vector< antenna * >::iterator *)& ((arg1)->itA);
  *(vector< antenna * >::iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1antenne_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  vector< antenna * > *arg2 = (vector< antenna * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(vector< antenna * > **)&jarg2; 
  if (arg1) (arg1)->antenne = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1antenne_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  vector< antenna * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (vector< antenna * > *)& ((arg1)->antenne);
  *(vector< antenna * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoAntenne_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  gruppoAntenne *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (gruppoAntenne *)new gruppoAntenne();
  *(gruppoAntenne **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoAntenne_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  gruppoAntenne *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (gruppoAntenne *)new gruppoAntenne(arg1);
  *(gruppoAntenne **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1gruppoAntenne(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gruppoAntenne **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1getMinNegID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (int)(arg1)->getMinNegID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1somma_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  antenna *arg2 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(antenna **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1somma_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  gruppoAntenne *arg2 = (gruppoAntenne *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(gruppoAntenne **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1getAntById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  int arg2 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (antenna *)(arg1)->getAntById(arg2);
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1removeAntById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeAntById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1deleteAntenne(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  (arg1)->deleteAntenne();
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoAntenne_1addAntenna(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  antenna *arg2 = (antenna *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  arg2 = *(antenna **)&jarg2; 
  result = (int)(arg1)->addAntenna(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1beginIter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  (arg1)->beginIter();
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1nextItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (antenna *)(arg1)->nextItem();
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoAntenne_1newAntenna(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  result = (antenna *)(arg1)->newAntenna();
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoAntenne_1ordina(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoAntenne *arg1 = (gruppoAntenne *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoAntenne **)&jarg1; 
  (arg1)->ordina();
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_impianto_1Modified_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  impianto *arg1 = (impianto *) 0 ;
  set< string > arg2 ;
  set< string > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  argp2 = *(set< string > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null set< string >");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->Modified = arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_impianto_1Modified_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  set< string > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result =  ((arg1)->Modified);
  *(set< string > **)&jresult = new set< string >((const set< string > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1impianto_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  impianto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (impianto *)new impianto();
  *(impianto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1impianto_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  impianto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (impianto *)new impianto(arg1);
  *(impianto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_impianto_1setDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jint jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)(arg1)->setDI(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getDI(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (char *)(arg1)->getDI(arg2);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_impianto_1setModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  impianto *arg1 = (impianto *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->setModified(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_impianto_1noModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  impianto *arg1 = (impianto *) 0 ;
  char *arg2 = (char *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->noModified(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_impianto_1isModified(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (bool)(arg1)->isModified(arg2);
  jresult = (jboolean)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_impianto_1setIdImp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  impianto *arg1 = (impianto *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIdImp(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_impianto_1setInfluente(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  impianto *arg1 = (impianto *) 0 ;
  bool arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setInfluente(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_impianto_1getInfluente(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (bool)(arg1)->getInfluente();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_impianto_1getCalcoloImpianto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (bool)(arg1)->getCalcoloImpianto();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_impianto_1getIdImp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (int)(arg1)->getIdImp();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_impianto_1getX(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (double)(arg1)->getX();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_impianto_1getY(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (double)(arg1)->getY();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_impianto_1getZ(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (double)(arg1)->getZ();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getNome(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getNome();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getCodImp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getCodImp();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getIndirizzo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getIndirizzo();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getRespImp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getRespImp();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getNote1(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getNote1();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getNote2(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getNote2();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getImmagine(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getImmagine();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getCreazione(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getCreazione();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getDataModifica(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getDataModifica();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getParere(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getParere();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getComunicazione(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getComunicazione();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_impianto_1getDataDismissione(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  impianto *arg1 = (impianto *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(impianto **)&jarg1; 
  result = (char *)(arg1)->getDataDismissione();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1impianto(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  impianto *arg1 = (impianto *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(impianto **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_NUM_1IMP_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_IMP_FLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_IMP_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[20] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[20])(char (*)[20])IMP_FLD;
  *(char (**)[20])&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_NUM_1ANT_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(int)NUM_ANT_FLD;
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_ANT_1FLD_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  char (*result)[20] = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (char (*)[20])(char (*)[20])ANT_FLD;
  *(char (**)[20])&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1impianti_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  vector< impianto * > *arg2 = (vector< impianto * > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(vector< impianto * > **)&jarg2; 
  if (arg1) (arg1)->impianti = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1impianti_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  vector< impianto * > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (vector< impianto * > *)& ((arg1)->impianti);
  *(vector< impianto * > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1itI_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  vector< impianto * >::iterator *arg2 = (vector< impianto * >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(vector< impianto * >::iterator **)&jarg2; 
  if (arg1) (arg1)->itI = *arg2;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1itI_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  vector< impianto * >::iterator *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (vector< impianto * >::iterator *)& ((arg1)->itI);
  *(vector< impianto * >::iterator **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1md5FileImp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if(arg2) {
      strncpy((char*)arg1->md5FileImp, (const char *)arg2, 40-1);
      arg1->md5FileImp[40-1] = 0;
    } else {
      arg1->md5FileImp[0] = 0;
    }
  }
  
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_gruppoImpianti_1md5FileImp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (char *)(char *) ((arg1)->md5FileImp);
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoImpianti_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  gruppoImpianti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (gruppoImpianti *)new gruppoImpianti();
  *(gruppoImpianti **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1gruppoImpianti_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  gruppoImpianti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (gruppoImpianti *)new gruppoImpianti(arg1);
  *(gruppoImpianti **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1gruppoImpianti(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(gruppoImpianti **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1creaFileErrori(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->creaFileErrori();
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_gruppoImpianti_1getStrErrori(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (char *)(arg1)->getStrErrori();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1azzeraStrErrori(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->azzeraStrErrori();
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1deleteImpianti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->deleteImpianti();
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1addImpianto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  impianto *arg2 = (impianto *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(impianto **)&jarg2; 
  result = (int)(arg1)->addImpianto(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1associaModelli(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (int)(arg1)->associaModelli();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1beginIter(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->beginIter();
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1nextItem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  impianto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (impianto *)(arg1)->nextItem();
  *(impianto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1getImpById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  impianto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (impianto *)(arg1)->getImpById(arg2);
  *(impianto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1removeImpById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeImpById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1getAntById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  antenna *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (antenna *)(arg1)->getAntById(arg2);
  *(antenna **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1removeAntById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeAntById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1leggiImpiantiAntenneXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->leggiImpiantiAntenneXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1scriviImpiantiAntenneXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->scriviImpiantiAntenneXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1leggiModelliDiagrammiXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->leggiModelliDiagrammiXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1scriviModelliDiagrammiXML(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->scriviModelliDiagrammiXML(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1newImpianto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  impianto *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (impianto *)(arg1)->newImpianto();
  *(impianto **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1newModello(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (modello *)(arg1)->newModello();
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1getGruppoModelli(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  gruppoModelli *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (gruppoModelli *)(arg1)->getGruppoModelli();
  *(gruppoModelli **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1getModById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  modello *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (modello *)(arg1)->getModById(arg2);
  *(modello **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1removeModById(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  result = (int)(arg1)->removeModById(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1getMinNegAntID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (int)(arg1)->getMinNegAntID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1getMinNegImpID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (int)(arg1)->getMinNegImpID();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1setMd5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->setMd5(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_libcampoclsJNI_gruppoImpianti_1getMd5(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (char *)(arg1)->getMd5();
  if (result) jresult = jenv->NewStringUTF((const char *)result);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1somma_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  impianto *arg2 = (impianto *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(impianto **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1somma_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  gruppoImpianti *arg2 = (gruppoImpianti *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(gruppoImpianti **)&jarg2; 
  result = (int)(arg1)->somma(arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1inizializzaCalcolo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->inizializzaCalcolo();
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1setInfluenti_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->setInfluenti(arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1setInfluenti_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  SHPObject *arg2 = (SHPObject *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = *(SHPObject **)&jarg2; 
  (arg1)->setInfluenti(arg2);
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1pnpoly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4, jdouble jarg5, jdouble jarg6) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int arg2 ;
  double *arg3 = (double *) 0 ;
  double *arg4 = (double *) 0 ;
  double arg5 ;
  double arg6 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(double **)&jarg3; 
  arg4 = *(double **)&jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  result = (int)(arg1)->pnpoly(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_gruppoImpianti_1ordinaSorgenti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  (arg1)->ordinaSorgenti();
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_gruppoImpianti_1getActiveImp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  gruppoImpianti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (gruppoImpianti *)(arg1)->getActiveImp();
  *(gruppoImpianti **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_gruppoImpianti_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  gruppoImpianti *arg1 = (gruppoImpianti *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(gruppoImpianti **)&jarg1; 
  result = (int)(arg1)->size();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_TRUE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_FALSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(0);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_sz_1TERMINATOR_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_MAX_1CHARS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(30);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_PIGRECO_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(3.141592654);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_ZCAR_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(376.73031346177);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_LAMBDA_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(0.3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_GRADI_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(360);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_N_1ANTENNE_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(50000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_TIPI_1ANT_1MAX_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(50000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_LEN_1WHERE_1IDMOD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(60000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_SIZE_1CONNSTRINGOUT_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(200);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_SIZE_1STR_1LOG_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(100000);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_NODATA_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  result = (int)(-9999);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_RADQ2_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  result = (double)(1.4142135623730950488);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1moduloCalcolo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  moduloCalcolo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (moduloCalcolo *)new moduloCalcolo();
  *(moduloCalcolo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_moduloCalcolo_1getGruppoImpianti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  gruppoImpianti *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  result = (gruppoImpianti *)(arg1)->getGruppoImpianti();
  *(gruppoImpianti **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_moduloCalcolo_1getPotTotPunto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  result = (double)(arg1)->getPotTotPunto();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_moduloCalcolo_1getPotTotPuntoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  result = (double)(arg1)->getPotTotPuntoH();
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_moduloCalcolo_1getIndexString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  result = (int)(arg1)->getIndexString();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_moduloCalcolo_1getHandleWinProgrMain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  result = (long)(arg1)->getHandleWinProgrMain();
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_moduloCalcolo_1setGruppoImpianti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  gruppoImpianti *arg2 = (gruppoImpianti *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = *(gruppoImpianti **)&jarg2; 
  (arg1)->setGruppoImpianti(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_moduloCalcolo_1setPotTotPunto(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPotTotPunto(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_moduloCalcolo_1setPotTotPuntoH(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (double)jarg2; 
  (arg1)->setPotTotPuntoH(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_moduloCalcolo_1setIndexString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  int arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setIndexString(arg2);
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_moduloCalcolo_1setHandleWinProgrMain(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->setHandleWinProgrMain(arg2);
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_moduloCalcolo_1calcoloOrizz(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jstring jarg8, jstring jarg9, jstring jarg10, jint jarg11, jint jarg12) {
  jint jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  int arg11 ;
  int arg12 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *)jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return 0;
  }
  arg11 = (int)jarg11; 
  arg12 = (int)jarg12; 
  result = (int)(arg1)->calcoloOrizz(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12);
  jresult = (jint)result; 
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *)arg10);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_moduloCalcolo_1calcoloVert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2, jdouble jarg3, jdouble jarg4, jdouble jarg5, jdouble jarg6, jdouble jarg7, jdouble jarg8, jstring jarg9, jstring jarg10, jstring jarg11, jint jarg12, jint jarg13) {
  jint jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  double arg2 ;
  double arg3 ;
  double arg4 ;
  double arg5 ;
  double arg6 ;
  double arg7 ;
  double arg8 ;
  char *arg9 = (char *) 0 ;
  char *arg10 = (char *) 0 ;
  char *arg11 = (char *) 0 ;
  int arg12 ;
  int arg13 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (double)jarg3; 
  arg4 = (double)jarg4; 
  arg5 = (double)jarg5; 
  arg6 = (double)jarg6; 
  arg7 = (double)jarg7; 
  arg8 = (double)jarg8; 
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *)jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return 0;
  }
  arg11 = 0;
  if (jarg11) {
    arg11 = (char *)jenv->GetStringUTFChars(jarg11, 0);
    if (!arg11) return 0;
  }
  arg12 = (int)jarg12; 
  arg13 = (int)jarg13; 
  result = (int)(arg1)->calcoloVert(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11,arg12,arg13);
  jresult = (jint)result; 
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *)arg10);
  if (arg11) jenv->ReleaseStringUTFChars(jarg11, (const char *)arg11);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_moduloCalcolo_1calcoloPunti(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(moduloCalcolo **)&jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3; 
  result = (int)(arg1)->calcoloPunti(arg2,arg3);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1moduloCalcolo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  moduloCalcolo *arg1 = (moduloCalcolo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(moduloCalcolo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< int > *)new std::vector< int >();
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< int >::size_type arg1 ;
  std::vector< int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< int >::size_type)jarg1; 
  result = (std::vector< int > *)new std::vector< int >(arg1);
  *(std::vector< int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = ((std::vector< int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (std::vector< int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  result = (bool)((std::vector< int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  std::vector< int >::value_type *arg2 = 0 ;
  std::vector< int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  temp2 = (std::vector< int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_libcampoclsJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< int >::value_type *) &std_vector_Sl_int_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  int arg2 ;
  std::vector< int >::value_type *arg3 = 0 ;
  std::vector< int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< int > *arg1 = (std::vector< int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< int > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector< double > *)new std::vector< double >();
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector< double >::size_type arg1 ;
  std::vector< double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector< double >::size_type)jarg1; 
  result = (std::vector< double > *)new std::vector< double >(arg1);
  *(std::vector< double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = ((std::vector< double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (std::vector< double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_libcampoclsJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  result = (bool)((std::vector< double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  std::vector< double >::value_type *arg2 = 0 ;
  std::vector< double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  temp2 = (std::vector< double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector< double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_libcampoclsJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< double >::value_type *) &std_vector_Sl_double_Sg__get(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  int arg2 ;
  std::vector< double >::value_type *arg3 = 0 ;
  std::vector< double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector< double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector< double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_libcampoclsJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector< double > *arg1 = (std::vector< double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector< double > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_libcampoclsJNI_impianto_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(gruppoAntenne **)&baseptr = *(impianto **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

